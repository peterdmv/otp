SSL/TLS -*- mode: org -*-


* client call flow

>>> ClientHello
<<< ServerHello ...
hello
  gen_info
    handle_info
      next_tls_record
        tls_record:get_tls_records -> {Records, Rest}
          get_tls_records_aux --- ??? ([Data, TLSHeader2, Data]) -> {[tls_records], incomplete data}
          next_record (Rest, TLSRecords) -> {TLSPlain, State}
      *next_event* (state transition) : send internal {protocol_record, TLSPlain}

hello( protocol_record, TLSPlain)
  gen_handshake
    ssl_connection:hello
      ssl_connection:handle_common_event
        tls_connection:handle_common_event (handshake, Plain)
          tls_handshake:get_tls_handshake -> ??
            tls_handshake:get_tls_handshake_aux -> {[{Handshake, Raw}], Rest}
              tls_handshake:decode_handshake -> #client_hello{}
          tls_handshake_event ([{Handshake,Raw}]) : {next_event, internal, {handshake, Packet}
          *next_state #state{unprocessed_handshake_events = unprocessed_events(Events)* , Events
          Note: order preserved in the next_event list!

???
unprocessed_events(Events) ->
    %% The first handshake event will be processed immediately
    %% as it is entered first in the event queue and
    %% when it is processed there will be length(Events)-1
    %% handshake events left to process before we should
    %% process more TLS-records received on the socket.
    erlang:length(Events)-1.

hello(internal, #server_hello) %% #ssl_options{handshake = full}
  tls_handshake:hello(#server_hello)
    tls_handshake:handle_server_hello_extensions
      ssl_handshake:handle_server_hello_extensions
  ssl_connection:handle_session
    ssl_connection:handle_new_session
       tls_connection:next_record
         * {no_record, State#state{unprocessed_handshake_events = N-1}}; -> event already queued up
         * fetch next record -> {TLSPlain, State}
       tls_connection:next_event(certify, no_record, State)

IF internal #certificate
certify(Type, Event, State)
  gen_handshake
    ssl_connection:certify


* server call flow - handshake/1 (ssl_accept/1)


#+BEGIN_SRC
### process: user ###
ssl:listen/2
  ssl:do_listen/3 (tls_connection)
    tls_socket:listen/3 -> {ok, #sslsocket{pid = {ListenSocket, Config#config{emulated = Tracker}}}};
      gen_tcp:listen/2 -> ListenSocket
      tls_socket:inherit_tracker/3 -> Tracker

ssl:transport_accept/1 -> #sslsocket{}
  ssl:transport_accept/2
    tls_socket:accept/3
      gen_tcp:accept/2 -> Socket
      tls_sender:start/0 -> Sender
      tls_connection_sup:start_child/1 -> Pid
      ssl_connection:socket_control/5 (Socket, Pids = [Pid, Sender])
        gen_tcp:controlling_process/2 (Socket, Pid)
	tls_connection:socket/5
	  tls_socket:socket/5 -> #sslsocket{pid = Pids,
	                                    fd = {Transport, Socket, ConnectionCb, Tracker}}.

### process: tls_connection ###
tls_connection:start_link/8
  tls_connection:init/1
    link(Sender)
    gen_statem:enter_loop(?MODULE, [], init, State)

### process: user ###
ssl:ssl_handshake/1
  ssl:ssl_handshake/2
    ssl_connection:handshake/2 (for sslsocket = #sslsocket{pid = [Pid|_]})
       ssl_connection:call(Pid, {start, Timeout})

### process: tls_connection ###
tls_connection:init/3
  tls_connection:gen_handshake/4 (state: init, {start, Timeout})
    ssl_connection:init/4
       tls_connection:next_record/1 -> {no_record, State}
         tls_socket:setopts(Transport, Socket, [{active,once}])
       tls_connection:next_event/3 (new state: hello, no_record) -> {next_state, hello, ...};

tls_connection:hello/3 (info)
  tls_connection:gen_info/3
    tls_connection:handle_info/3
      tls_connection:next_tls_record/3 -> {Record, State}
        tls_record:get_tls_records/4
          tls_record:get_tls_records_aux/3 -> {[#ssl_tls{}], Data}

        tls_connection:next_record/1 (State:  tls_cipher_texts = Records)
          tls_record:decode_cipher_text/3 -> {Plain, State}
      tls_connection:next_event/3 (Record = #ssl_tls{})
        {next_state, hello, State, [{next_event, internal, {protocol_record, Record}} | Actions]};

tls_connection:hello/3
  tls_connection:gen_handshake/4 (state: hello, {protocol_record, Record})
    ssl_connection:hello/4 (OR tls_connection_1_3:hello/4 ???)
      ssl_connection:handle_common_event/5
        tls_connection:handle_common_event/4
          tls_handshake:get_tls_handshake/4 -> {Packets, Buf}
            tls_handshake:get_tls_handshake_aux/4
              tls_handshake:decode_handshake/3
                ssl_handshake:decode_vector/1
                ssl_handshake:decode_hello_extensions/3
                #client_hello{}
              {Packets, Data}
          tls_connection:tls_handshake_events/1 -> Events
          {next_state, hello,  State1#state{unprocessed_handshake_events =
                                                unprocessed_events(Events)}

tls_connection:hello/3 (internal, #client_hello{})
  tls_handshake:hello/4 -> Version, ...
    ssl_handshake:select_supported_version -> Version
    tls_handshake:do_hello/7
      tls_handshake:handle_client_hello/5
        (tls_handshake_1_3:handle_client_hello - FORK)
        ssl_handshake:select_curve/3
        ssl_handshake:select_session/11 -> CipherSuite
        ssl_handshake:select_hashsign/5 -> HashSign
        tls_handshake:handle_client_hello_extensions/10
          ssl_handshake:handle_client_hello_extensions/9
            {Version, {Type, Session}, ConnectionStates, Protocol, ServerHelloExt, HashSign}
  (tls_connection_1_3:gen_handshake - FORK)
  tls_connection:gen_handshake/4 (hello, internal, {common_client_hello, ... }, State)
    ssl_connection:hello/4 (internal, {common_client_hello, ...}) (OR tls_connection_1_3:hello/4 ???)
      ssl_connection:do_server_hello/4
        ssl_handshake:server_hello/4 -> ServerHello
        ssl_connection:server_hello/3 -> State
          tls_connection:queue_handshake/2 (ServerHello, State)
        ssl_connection:new_server_hello/3 (ServerHello, State)
          ssl_connection:server_certify_and_key_exchange/2
            ssl_connection:certify_server/2
              ssl_handshake:certificate/4 -> #certificate{}
              tls_connection:queue_handshake/2 (Cert)
            ssl_connection:key_exchange/2
              ssl_handshake:key_exchange/3 -> Msg
              tls_connection:queue_handshake/2 (Msg)
            ssl_connection:request_client_cert/2
              ssl_handshake:available_signature_algs/2 -> HashSigns ???
              ssl_handshake:certificate_request/5 -> Msg
              tls_connection:queue_handshake/2 (Msg)
          ssl_connection:server_hello_done/2
            ssl_handshake:server_hello_done/0 -> #server_hello_done{}
            tls_connection:send_handshake/2 (HelloDone, State)
              tls_connection:queue_handshake/2 (HelloDone)
              tls_connection:send_handshake_flight/1 (State)
                tls_connection:send/3 (gen_tcp, Socket, Flight)
                  tls_socket:send/3 (gen_tcp, Socket, Data)
                    gen_tcp:send(Socket, Data)
Note: not possible
          tls_connection:next_record/1
            {no_record, State#state{unprocessed_handshake_events = N-1}};
          tls_connection:next_event/4 (new state: certify, no_record)
            {next_state, certify, State, Actions}
OR
          tls_connection:next_record/1
            tls_socket:setopts(Transport, Socket, [{active,once}])
            {no_record, State};
          tls_connection:next_event/4 (new state: certify, no_record)
            {next_state, certify, State, Actions}

tls_connection:certify/3 (info)
  tls_connection:gen_info/3
    tls_connection:handle_info/3
      tls_connection:next_tls_record/3 -> {Record, State} (Next plain text record)
        tls_record:get_tls_records/4 (Fill up tls_cipher_texts - up until finished message)
          tls_record:get_tls_records_aux/3 -> {[#ssl_tls{}], Data}
        tls_connection:next_record/1 (State:  tls_cipher_texts = Records)
          tls_record:decode_cipher_text/3 -> {Plain, State}
      tls_connection:next_event/3 (certify, Record = #ssl_tls{})
        {next_state, certify, State, [{next_event, internal, {protocol_record, Record}} | Actions]};

tls_connection:certify/3
  tls_connection:gen_handshake/4 (state: certify, {protocol_record, Record})
    ssl_connection:certify/4 (OR tls_connection_1_3:certify/4 ???)
      ssl_connection:handle_common_event/5
        tls_connection:handle_common_event/4
          tls_handshake:get_tls_handshake/4 -> {Packets, Buf}
            tls_handshake:get_tls_handshake_aux/4 -> [#client_key_exchange{}]
              tls_handshake:decode_handshake/3
                #client_key_exchange{exchange_keys = PKEPMS}
              {Packets, Data}
          tls_connection:tls_handshake_events/1 -> Events
          {next_state, certify,  State1#state{unprocessed_handshake_events =
                                                unprocessed_events(Events)}

tls_connection:certify/3 (internal, #client_key_exchange{})
  tls_connection:gen_handshake/4
    ssl_connection:certify/4 (OR tls_connection_1_3:certify/4 ???)
      ssl_connection:certify_client_key_exchange/1
        ssl_connection:calculate_master_secret/5 (next state: cipher)
          ssl_handshake:master_secret/4
            ssl_handshake:master_secret/5
              ssl_record:set_pending_cipher_state/4 -> State
          tls_connection:next_record -> Record
          tls_connection:next_event/3

[...Fetching next message...] -> internal, #change_cipher_spec{type = Data}

tls_connection:cipher/3 (internal, #change_cipher_spec{type = Data})
  tls_connection:gen_handshake/4
    ssl_connection:cipher/4 (OR tls_connection_1_3:cipher/4 ???)
      ssl_record:activate_pending_connection_state/3
        tls_connection:next_record -> Record
        tls_connection:next_event/3

[...Fetching next message...] -> internal, #finished{verify_data = Data}

tls_connection:cipher/3 (internal, #finished{verify_data = Data})
  tls_connection:gen_handshake/4
    ssl_connection:cipher/4 (OR tls_connection_1_3:cipher/4 ???)
      ssl_handshake:verify_connection/6
        ssl_handshake:calc_finished/5
          tls_v1:finished/5 -> verified
      ssl_connection:register_session/4
      ssl_connection:cipher_role/5
        ssl_record:set_server_verify_data -> ConnectionStates
        ssl_connection:prepare_connection/2 -> no_record, State
          ack_connection -> gen_statem:reply(From, ok)
        tls_connection:next_event/4 (connection, no_record)
          ssl_connection:hibernate_after/3 (connection, State, Actions)
            {next_state, connection, State, [{timeout, HibernateAfter, hibernate} | Actions]};

[...Fetching next message...]


X = TODO
no_record + unprocessed_handshake_events -> internal events in event queue
change_cipher_spec is in a different #ssl_tls{} record

#+END_SRC

* Debug logs

DEBUG: TLS 1.2 [undefined] State: init Type: {call, ..., Event: {start,
DEBUG: TLS 1.2 [undefined] State: hello Type: internal Event: {protocol_record,
DEBUG: TLS 1.2 [undefined] State: hello Type: internal Event: {handshake, {{client_hello,
DEBUG: TLS 1.2 [{3,3}] State: hello Type: internal Event: {common_client_hello
DEBUG: TLS 1.2 [{3,3}] State: certify Type: internal Event: {protocol_record,
DEBUG: TLS 1.2 [{3,3}] State: certify Type: internal Event: {handshake, {{client_key_exchange
DEBUG: TLS 1.2 [{3,3}] State: cipher Type: internal Event: {protocol_record
DEBUG: TLS 1.2 [{3,3}] State: cipher Type: internal Event: {change_cipher_spec
DEBUG: TLS 1.2 [{3,3}] State: cipher Type: internal Event: {protocol_record
DEBUG: TLS 1.2 [{3,3}] State: cipher Type: internal Event: {handshake, {{finished
DEBUG: TLS 1.2 [{3,3}] State: cipher Type: internal Event: {finished


* Supported Groups


| TLS 1.3                           | TLS 1.2                 |
|-----------------------------------+-------------------------|
| obsolete_RESERVED(0x0001..0x0016) |                         |
| secp256r1(0x0017)                 | secp256r1(0x0017)       |
| secp384r1(0x0018)                 | secp384r1(0x0018)       |
| secp521r1(0x0019)                 | secp521r1(0x0019)       |
| obsolete_RESERVED(0x001A..0x001C) | brainpoolP256r1(0x001A) |
|                                   | brainpoolP384r1(0x001B) |
|                                   | brainpoolP512r1(0x001C) |
| x25519(0x001D)                    |                         |
| x448(0x001E)                      |                         |


* RFCs


RFC 5639
Elliptic Curve Cryptography (ECC) Brainpool Standard 
Curves and Curve Generation
https://tools.ietf.org/html/rfc5639#section-4.1
Object Identifiers and ASN.1 Syntax

https://tools.ietf.org/html/rfc8446#section-4.2.7
Supported Groups Extension



RFC8422
Elliptic Curve Cryptography (ECC) Cipher Suites
for Transport Layer Security (TLS) Versions 1.2 and Earlier
https://tools.ietf.org/html/rfc8422


enum {
  deprecated(1..22),
  secp256r1 (23), secp384r1 (24), secp521r1 (25),
  x25519(29), x448(30),
  reserved (0xFE00..0xFEFF),
  deprecated(0xFF01..0xFF02),
  (0xFFFF)
} NamedCurve;


RFC7919
Negotiated Finite Field Diffie-Hellman Ephemeral Parameters
for Transport Layer Security (TLS)

** OBSOLETE

RFC4492 -> *obsoleted by RFC8422*
Elliptic Curve Cryptography (ECC) Cipher Suites
for Transport Layer Security (TLS)

sect163k1 (1), sect163r1 (2), sect163r2 (3),
sect193r1 (4), sect193r2 (5), sect233k1 (6),
sect233r1 (7), sect239k1 (8), sect283k1 (9),
sect283r1 (10), sect409k1 (11), sect409r1 (12),
sect571k1 (13), sect571r1 (14), secp160k1 (15),
secp160r1 (16), secp160r2 (17), secp192k1 (18),
secp192r1 (19), secp224k1 (20), secp224r1 (21),
secp256k1 (22), secp256r1 (23), secp384r1 (24),
secp521r1 (25),
reserved (0xFE00..0xFEFF),
arbitrary_explicit_prime_curves(0xFF01),
arbitrary_explicit_char2_curves(0xFF02),
(0xFFFF)



* Code

-define(DEFAULT_DIFFIE_HELLMAN_GENERATOR, 2).
-define(DEFAULT_DIFFIE_HELLMAN_PRIME,
	16#FFFFFFFFFFFFFFFFC90FDAA22168C234C4C6628B80DC1CD129024E088A67CC74020BBEA63B139B22514A08798E3404DDEF9519B3CD3A431B302B0A6DF25F14374FE1356D6D51C245E485B576625E7EC6F44C42E9A637ED6B0BFF5CB6F406B7EDEE386BFB5A899FA5AE9F24117C4B1FE649286651ECE45B3DC2007CB8A163BF0598DA48361C55D39A69163FA8FD24CF5F83655D23DCA3AD961C62F356208552BB9ED529077096966D670C354E4ABC9804F1746C08CA18217C32905E462E36CE3BE39E772C180E86039B2783A2EC07A28FB5C55DF06F4C52C9DE2BCBF6955817183995497CEA956AE515D2261898FA051015728E5A8AACAA68FFFFFFFFFFFFFFFF).

-define(FFDHE2048_GENERATOR, 2).
-define(FFDHE2048_PRIME,
        16#FFFFFFFFFFFFFFFFADF85458A2BB4A9AAFDC5620273D3CF1D8B9C583CE2D3695A9E13641146433FBCC939DCE249B3EF97D2FE363630C75D8F681B202AEC4617AD3DF1ED5D5FD65612433F51F5F066ED0856365553DED1AF3B557135E7F57C935984F0C70E0E68B77E2A689DAF3EFE8721DF158A136ADE73530ACCA4F483A797ABC0AB182B324FB61D108A94BB2C8E3FBB96ADAB760D7F4681D4F42A3DE394DF4AE56EDE76372BB190B07A7C8EE0A6D709E02FCE1CDF7E2ECC03404CD28342F619172FE9CE98583FF8E4F1232EEF28183C3FE3B1B4C6FAD733BB5FCBC2EC22005C58EF1837D1683B2C6F34A26C1B2EFFA886B423861285C97FFFFFFFFFFFFFFFF).


-define(FFDHE3072_GENERATOR, 2).
-define(FFDHE3072_PRIME,
        16#FFFFFFFFFFFFFFFFADF85458A2BB4A9AAFDC5620273D3CF1D8B9C583CE2D3695A9E13641146433FBCC939DCE249B3EF97D2FE363630C75D8F681B202AEC4617AD3DF1ED5D5FD65612433F51F5F066ED0856365553DED1AF3B557135E7F57C935984F0C70E0E68B77E2A689DAF3EFE8721DF158A136ADE73530ACCA4F483A797ABC0AB182B324FB61D108A94BB2C8E3FBB96ADAB760D7F4681D4F42A3DE394DF4AE56EDE76372BB190B07A7C8EE0A6D709E02FCE1CDF7E2ECC03404CD28342F619172FE9CE98583FF8E4F1232EEF28183C3FE3B1B4C6FAD733BB5FCBC2EC22005C58EF1837D1683B2C6F34A26C1B2EFFA886B4238611FCFDCDE355B3B6519035BBC34F4DEF99C023861B46FC9D6E6C9077AD91D2691F7F7EE598CB0FAC186D91CAEFE130985139270B4130C93BC437944F4FD4452E2D74DD364F2E21E71F54BFF5CAE82AB9C9DF69EE86D2BC522363A0DABC521979B0DEADA1DBF9A42D5C4484E0ABCD06BFA53DDEF3C1B20EE3FD59D7C25E41D2B66C62E37FFFFFFFFFFFFFFFF).

-define(FFDHE4096_GENERATOR, 2).
-define(FFDHE4096_PRIME,
        16#FFFFFFFFFFFFFFFFADF85458A2BB4A9AAFDC5620273D3CF1D8B9C583CE2D3695A9E13641146433FBCC939DCE249B3EF97D2FE363630C75D8F681B202AEC4617AD3DF1ED5D5FD65612433F51F5F066ED0856365553DED1AF3B557135E7F57C935984F0C70E0E68B77E2A689DAF3EFE8721DF158A136ADE73530ACCA4F483A797ABC0AB182B324FB61D108A94BB2C8E3FBB96ADAB760D7F4681D4F42A3DE394DF4AE56EDE76372BB190B07A7C8EE0A6D709E02FCE1CDF7E2ECC03404CD28342F619172FE9CE98583FF8E4F1232EEF28183C3FE3B1B4C6FAD733BB5FCBC2EC22005C58EF1837D1683B2C6F34A26C1B2EFFA886B4238611FCFDCDE355B3B6519035BBC34F4DEF99C023861B46FC9D6E6C9077AD91D2691F7F7EE598CB0FAC186D91CAEFE130985139270B4130C93BC437944F4FD4452E2D74DD364F2E21E71F54BFF5CAE82AB9C9DF69EE86D2BC522363A0DABC521979B0DEADA1DBF9A42D5C4484E0ABCD06BFA53DDEF3C1B20EE3FD59D7C25E41D2B669E1EF16E6F52C3164DF4FB7930E9E4E58857B6AC7D5F42D69F6D187763CF1D5503400487F55BA57E31CC7A7135C886EFB4318AED6A1E012D9E6832A907600A918130C46DC778F971AD0038092999A333CB8B7A1A1DB93D7140003C2A4ECEA9F98D0ACC0A8291CDCEC97DCF8EC9B55A7F88A46B4DB5A851F44182E1C68A007E5E655F6AFFFFFFFFFFFFFFFF).

-define(FFDHE6144_GENERATOR, 2).
-define(FFDHE6144_PRIME,


-define(FFDHE8192_GENERATOR, 2).
-define(FFDHE8192_PRIME,

